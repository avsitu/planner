{"version":3,"sources":["EventTable.js","UpdateEvent.js","AddEvent.js","TableControls.js","App.js","serviceWorker.js","index.js"],"names":["hours","Checkbox","props","handleBoxClick","bind","e","target","classList","contains","remove","add","selected","this","data","includes","id","className","onClick","name","aria-hidden","Component","Tdata","Trow","h","hour","checkboxes","dates","map","date","key","scope","Tbody","body","i","length","push","Thead","header","concat","EventTable","SubmitButton","handleSubmit","document","querySelectorAll","forEach","box","onSubmit","currentSelection","disabled","NewEvent","handleNewEvent","onFormSubmit","type","data-toggle","data-target","aria-expanded","aria-controls","htmlFor","hidden","placeholder","Controls","state","newName","handleNameSwitch","handleKeyInput","handleNewUser","handlePageSwitch","onNameSwitch","onPageSwitch","event","value","setState","toLowerCase","preventDefault","users","alert","onNewUser","href","onChange","UsersDropdown","dataset","buttons","user","data-name","splice","aria-haspopup","aria-labelledby","findOverlap","eventData","count","overlap","day","person","filter","time","App","context","eventId","eventsList","path","handleEventUpdate","fetch","then","res","json","result","console","log","error","getAttribute","index","parseInt","substr","url","Object","keys","selections","toString","querySelector","inputs","datesSet","Set","input","slice","newDates","Array","from","events","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d46c9fff.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nconst hours = [\"9AM\", \"10AM\", \"11AM\", \"12PM\",\"1PM\",\"2PM\",\"3PM\",\"4PM\",\"5PM\",\"6PM\",\"7PM\",\"8PM\",\"9PM\"];\r\n\r\nclass Checkbox extends Component<{name:string,id:string,data:string[]},{}> {\r\n    constructor(props) {\r\n        super(props);\r\n        // this.selected = sampleInput.hasOwnProperty(props.id);\r\n        this.handleBoxClick = this.handleBoxClick.bind(this);\r\n        // this.handleDataSwitch = this.handleDataSwitch.bind(this);\r\n        // this.state = {\r\n        //     selected: this.props.data.includes(this.props.id)\r\n        // }\r\n    }\r\n\r\n    handleBoxClick(e) { //handles checkbox update\r\n        // this.props.onBoxClick(e.target);\r\n        var target = e.target;\r\n        if(target.classList.contains (\"true\")) {\r\n            target.classList.remove(\"true\");\r\n            target.classList.add(\"false\");\r\n        }   \r\n        else {\r\n            target.classList.remove(\"false\");\r\n            target.classList.add(\"true\");\r\n        } \r\n    } \r\n\r\n    // componentWillReceiveProps(nextProps) {\r\n    //     console.log('new props ', nextProps.id, nextProps.data.includes(nextProps.id));\r\n    //     this.setState({selected: nextProps.data.includes(nextProps.id)});\r\n    // }            \r\n    render() {\r\n        const selected = this.props.data.includes(this.props.id);\r\n        // console.log(\"rendered: \", this.props.id, this.state.selected);\r\n        return (\r\n            <div className=\"box-container\">\r\n                <span className={selected ? \"checkmark true\" : \"checkmark false\"} \r\n                id={this.props.id} onClick={this.props.name !== \"Everyone\" ? this.handleBoxClick : ()=>false} aria-hidden=\"true\"></span>\r\n            </div>                    \r\n        );\r\n    }\r\n\r\n}\r\n\r\nfunction Tdata(props) { //KEY IS THE KeY!!!!!\r\n    return (\r\n        <td id={\"box-\"+props.id}> \r\n            <Checkbox id={props.id} data={props.data} name={props.name}/>\r\n        </td>\r\n    );            \r\n}\r\n\r\nfunction Trow(props) {\r\n    var h = props.hour;\r\n    // var days = [\"mon\"];\r\n    var checkboxes = props.dates.map((date) => <Tdata key={props.name+\"-\"+date+\"-\"+h} id={date+\"-\"+h} data={props.data} name={props.name}/>); \r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{h}</th>\r\n            {checkboxes}\r\n        </tr>\r\n    );\r\n}\r\n\r\nfunction Tbody(props) {\r\n    var body = [];\r\n    for(var i = 0; i < hours.length; i++) { //each row is hour\r\n        body.push(<Trow key={\"hour-\"+hours[i]} hour={hours[i]} data={props.data} name={props.name} dates={props.dates} />);\r\n    }\r\n    return <tbody>{body}</tbody>;\r\n}\r\n\r\nfunction Thead(props) {\r\n    var header = [\"Hour\"].concat(props.dates).map((date) => <th scope=\"col\" key={date}>{date}</th>);\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                {header}\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\nclass EventTable extends Component<{name:string,dates:any[],data:any[]}> {\r\n    render() {\r\n        return(\r\n            <table className=\"table\">\r\n                <Thead dates={this.props.dates} />\r\n                <Tbody name={this.props.name} data={this.props.data} dates={this.props.dates} />\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EventTable;\r\n","import React, { Component } from 'react'\r\n\r\nclass SubmitButton extends Component<{name:string,eventId:number,onSubmit(selections:string[]):void},{}> {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    currentSelection() {\r\n        var checkboxes = document.querySelectorAll(\".checkmark\");\r\n        var selected = [];\r\n        checkboxes.forEach(box => {\r\n            // console.log(box.id,box.dataset.checked);\r\n            if(box.classList.contains(\"true\")) \r\n                selected.push(box.id);\r\n        });\r\n        // console.log(selected);\r\n        return selected;\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        // var name = this.props.name;\r\n        // sampleInput[this.props.eventId][name] = this.currentSelection();\r\n        this.props.onSubmit(this.currentSelection());\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.name===\"Everyone\" && <button disabled className=\"b-submit btn btn-primary\">(You May Not Edit This Selection.) </button>}\r\n                {this.props.name!==\"Everyone\" && <button onClick={this.handleSubmit} className=\"b-submit btn btn-primary\">Submit Changes for <b>{this.props.name}</b></button>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SubmitButton;","import React, { Component } from 'react'\r\n\r\nclass NewEvent extends Component<{ onFormSubmit(e): void }, {}> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNewEvent = this.handleNewEvent.bind(this);\r\n    }\r\n\r\n    handleNewEvent(e) {\r\n        this.props.onFormSubmit(e);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>\r\n                    <button className=\"btn btn-primary\" type=\"button\" data-toggle=\"collapse\" data-target=\"#fcollapse\" aria-expanded=\"false\" aria-controls=\"collapseExample\">\r\n                        Add New Event\r\n                        </button>\r\n                </p>\r\n                <div className=\"collapse\" id=\"fcollapse\">\r\n                    <div className=\"card card-body\">\r\n                        <form className=\"form-inline dates-form\" onSubmit={this.handleNewEvent} id=\"newForm\">\r\n                            <label htmlFor=\"date1\" hidden />\r\n                            <input type=\"text\" className=\"form-control mb-2 mr-sm-2\" placeholder=\"Event name\"/>\r\n                            <label>Select Dates:</label>\r\n                            <input type=\"date\" className=\"form-control mb-2 mr-sm-2\" />\r\n                            <input type=\"date\" className=\"form-control mb-2 mr-sm-2\" />\r\n                            <input type=\"date\" className=\"form-control mb-2 mr-sm-2\" />\r\n                            <input type=\"date\" className=\"form-control mb-2 mr-sm-2\" />\r\n                            <input type=\"date\" className=\"form-control mb-2 mr-sm-2\" />\r\n                            <button className=\"btn btn-primary mb-2\" type=\"submit\">Add</button>\r\n                        </form>\r\n                        <p id=\"invalid-err\" className=\"hide\">Please enter dates in valid format.</p>\r\n                        <p id=\"empty-err\" className=\"hide\">Please enter at least 1 valid date.</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default NewEvent;","import React, { Component } from 'react'\r\n\r\nclass Controls extends Component<\r\n        {eventId:number,name:string,users:string[],onNameSwitch(name:string):void,onPageSwitch(e):void,onNewUser(newName:string):void},\r\n        {newName:string}\r\n    > {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newName: \"\",\r\n            // users: [\"Everyone\"].concat(Object.keys(sampleInput[this.props.eventId]))\r\n        }\r\n    \r\n        this.handleNameSwitch = this.handleNameSwitch.bind(this);\r\n        this.handleKeyInput = this.handleKeyInput.bind(this);\r\n        this.handleNewUser = this.handleNewUser.bind(this);\r\n        this.handlePageSwitch = this.handlePageSwitch.bind(this);\r\n    }\r\n\r\n    handleNameSwitch(name) {\r\n        this.props.onNameSwitch(name);\r\n        // document.querySelector(\"#user-toggle\").innerHTML = name;\r\n    }\r\n\r\n    handlePageSwitch(e) {\r\n        this.props.onPageSwitch(e);\r\n    }\r\n\r\n    handleKeyInput(event) {\r\n        if(event.target.value.includes(\" \")) //no spaces for input\r\n            event.target.value = this.state.newName;\r\n        else    \r\n            this.setState({newName: event.target.value.toLowerCase()});\r\n    }\r\n\r\n    handleNewUser(event) {\r\n        event.preventDefault();\r\n        if(this.props.users.includes(this.state.newName)) \r\n            alert('The name already exists: ' + this.state.newName);\r\n        else if(this.state.newName === \"everyone\" || this.state.newName === \"\") \r\n            alert('That name is invalid.');\r\n        else {\r\n            // sampleInput[this.props.eventId][this.state.newName] = [];\r\n            // this.handleNameSwitch(this.state.newName);\r\n            this.props.onNewUser(this.state.newName);\r\n            this.setState({newName: \"\"});\r\n        } \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p><a className=\"btn btn-primary\" href = \"/\" onClick={this.handlePageSwitch}>&#x21d0; Home</a></p>\r\n                <form className=\"form-inline\" onSubmit={this.handleNewUser}>\r\n                    <input type=\"text\" className=\"form-control mb-2 mr-sm-2\" placeholder=\"Add me...\" onChange={this.handleKeyInput} value={this.state.newName}/>\r\n                    <button className=\"btn btn-primary  mb-2\" type=\"submit\">Add</button>\r\n                </form>\r\n                <UsersDropdown onNameSwitch={this.handleNameSwitch} users={this.props.users} name={this.props.name}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nclass UsersDropdown extends Component<{onNameSwitch(name:string):void,users:string[],name:string},{}> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameSwitch = this.handleNameSwitch.bind(this);\r\n    }  \r\n    \r\n    handleNameSwitch(e) {\r\n        // e.preventDefault();\r\n        // var name = e.target.dataset.name;\r\n        e.preventDefault();\r\n        var name = e.target.dataset.name;\r\n        this.props.onNameSwitch(name);\r\n    }            \r\n\r\n    render() {\r\n        var buttons = this.props.users.map((user) => \r\n            <button className=\"dropdown-item\" data-name={user} onClick={this.handleNameSwitch} key={\"user-\"+user}>{user}</button>\r\n        );\r\n        buttons.splice(1,0,(<div key=\"divider\" className=\"dropdown-divider\"></div>));\r\n        return (\r\n            <div className=\"dropdown\">\r\n                <span>Show Availability for: </span>\r\n                <button id=\"user-toggle\" className=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                    {this.props.name}\r\n                </button>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                    {buttons}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Controls;","import React, { Component } from 'react'\r\nimport EventTable from './EventTable'\r\nimport SubmitButton from './UpdateEvent'\r\nimport NewEvent from './AddEvent'\r\nimport Controls from './TableControls'\r\n\r\nconst sampleInput = [\r\n    {\r\n        \"alice\": [\"5-2-1PM\"],\r\n        \"bob\": [\"5-4-2PM\", \"5-4-3PM\", \"5-4-4PM\", \"5-10-2PM\", \"5-11-2PM\"]\r\n    },\r\n    {\r\n        \"eve\": [\"5-3-1PM\"],\r\n        \"carl\": [\"5-5-1PM\"]\r\n    }\r\n];\r\n\r\nconst sampleDates = [\r\n    [\r\n        \"5-2\", \"5-3\", \"5-4\", \"5-10\", \"5-11\"\r\n    ],\r\n    [\r\n        \"5-3\", \"5-5\", \"5-6\"\r\n    ]\r\n]\r\n\r\nconst hours = [\"9AM\", \"10AM\", \"11AM\", \"12PM\", \"1PM\", \"2PM\", \"3PM\", \"4PM\", \"5PM\", \"6PM\", \"7PM\", \"8PM\", \"9PM\"];\r\n\r\nfunction findOverlap(eventData, dates, count) {\r\n    if(count == 1) return [];\r\n    var overlap = [];\r\n    //populates list with all possible time slots\r\n    dates.forEach(day => {\r\n        hours.forEach(hour => {\r\n            overlap.push(day + \"-\" + hour);\r\n        });\r\n    });\r\n    //filters for time slots that exist for all persons\r\n    for (let person in eventData) {\r\n        overlap = overlap.filter((time) => eventData[person].includes(time));\r\n    }\r\n    // console.log(overlap);\r\n    return overlap;\r\n}\r\n\r\nclass App extends Component<{}, { eventId: number, data: {}, users: string[], name: string, path: string, eventsList: any[] }> {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {\r\n            eventId: 0,\r\n            data: {}, \r\n            // dates: [],\r\n            users: [],\r\n            eventsList: [],\r\n            name: \"\",\r\n            path: \"/\"\r\n        };\r\n        this.handleNameSwitch = this.handleNameSwitch.bind(this);\r\n        this.handlePageSwitch = this.handlePageSwitch.bind(this);\r\n        this.handleNewEvent = this.handleNewEvent.bind(this);\r\n        this.handleEventUpdate = this.handleEventUpdate.bind(this);\r\n        this.handleNewUser = this.handleNewUser.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"/events/get\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    console.log(result);\r\n                    this.setState({ eventsList: result });\r\n                },\r\n                // Note: it's important to handle errors here\r\n                // instead of a catch() block so that we don't swallow\r\n                // exceptions from actual bugs in components.\r\n                (error) => {\r\n                    console.log(error);\r\n                }\r\n            )\r\n\r\n    }\r\n\r\n    handleNameSwitch(newName) {\r\n        this.setState({\r\n            name: newName,\r\n        });\r\n    }\r\n\r\n    handlePageSwitch(e) {\r\n        e.preventDefault();\r\n        var href = e.target.getAttribute('href');\r\n        if (href.includes(\"?event=\")) {\r\n            var index = parseInt(href.substr(7));\r\n            const url = \"/users/get?id=\"+this.state.eventsList[index].id;\r\n            // console.log(url);\r\n            fetch(url)\r\n                .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                        // console.log(result);\r\n                        this.setState({\r\n                            eventId: index,\r\n                            name: \"Everyone\",\r\n                            data: result,\r\n                            // data: findOverlap(sampleInput[id], sampleDates[id]),\r\n                            // dates: sampleDates[id],\r\n                            users: [\"Everyone\"].concat(Object.keys(result)),\r\n                            path: href //issue:path may be changing before other states are updated\r\n                        });\r\n                    },\r\n                    (error) => {\r\n                        console.log(error);\r\n                    }\r\n                );\r\n        }\r\n        else\r\n            this.setState({ path: href });\r\n    }\r\n\r\n    handleEventUpdate(selections) {\r\n        // sampleInput[this.state.eventId][this.state.name] = selections;\r\n        // console.log(\"submmited to sampleInput: \", this.state.name, sampleInput[this.state.eventId][this.state.name]);\r\n        this.setState(state => {\r\n            let data = { ...state.data };\r\n            data[state.name] = selections;\r\n            return { data };\r\n        });\r\n        const url = `/users/update?name=${this.state.name}&id=${this.state.eventsList[this.state.eventId].id}&dates=${selections.toString()}`;\r\n        // console.log(url);\r\n        fetch(url);\r\n    }\r\n\r\n    handleNewUser(newName) {\r\n        // sampleInput[this.state.eventId][newName] = [];\r\n        this.setState((state) => ({ \r\n            users: state.users.concat([newName]),\r\n            name: newName      \r\n        }),()=>this.handleEventUpdate([]));\r\n        // this.handleNameSwitch(newName);\r\n        const url = `/users/add?name=${newName}&id=${this.state.eventsList[this.state.eventId].id}`;\r\n        fetch(url);\r\n    }\r\n\r\n    /*-----------------------------*/\r\n\r\n    //validates date inputs from user\r\n    validate(value) {\r\n        return true;\r\n        var arr = value.split('/');\r\n        if (arr.length !== 2) return null;\r\n        var formatted = arr.map((v) => parseInt(v)).join('-');\r\n        if (formatted.includes(\"NaN\")) return null;\r\n        else return formatted;\r\n    }\r\n\r\n    handleNewEvent(e) {\r\n        e.preventDefault();\r\n        document.querySelector(\"#invalid-err\").classList.add(\"hide\");\r\n        document.querySelector(\"#empty-err\").classList.add(\"hide\");\r\n        // console.log(e.target.querySelectorAll(\"input\"));\r\n        const name = e.target.querySelector(\"input[type='text']\").value;\r\n        var inputs = e.target.querySelectorAll(\"input[type='date']\");\r\n        const datesSet = new Set();\r\n        inputs.forEach((input) => {\r\n            // console.log(input.value);\r\n            // input.classList.remove(\"error\");\r\n            if (input.value !== \"\") {\r\n                // var d = this.validate(input.value);\r\n                // if (!d) {\r\n                //     input.classList.add(\"error\");\r\n                //     document.querySelector(\"#invalid-err\").classList.remove(\"hide\");\r\n                // }\r\n                datesSet.add(input.value.slice(5));\r\n            }\r\n        });\r\n        const newDates = Array.from(datesSet);\r\n        // console.log(newDates);\r\n        if (newDates.length === 0) document.querySelector(\"#empty-err\").classList.remove(\"hide\");\r\n        else {\r\n            const url = `/events/add?name=${name}&dates=${newDates.toString()}`;\r\n            fetch(url)\r\n                .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                        console.log(result);\r\n                        this.setState(state => ({eventsList: state.eventsList.concat([result])}));\r\n                    },\r\n                    (error) => {\r\n                        console.log(error);\r\n                    }\r\n                );            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.path.includes(\"?event=\")) {\r\n            const dates = this.state.eventsList[this.state.eventId].dates;\r\n            return (\r\n                <div>\r\n                    <Controls eventId={this.state.eventId} name={this.state.name} users={this.state.users}\r\n                        onNameSwitch={this.handleNameSwitch} onPageSwitch={this.handlePageSwitch} onNewUser={this.handleNewUser} />\r\n                    <EventTable dates={dates} name={this.state.name}\r\n                        data={this.state.name !== \"Everyone\" ? \r\n                            (this.state.data[this.state.name] || []) : \r\n                            findOverlap(this.state.data, dates, this.state.users.length)} />\r\n                    <SubmitButton name={this.state.name} eventId={this.state.eventId} onSubmit={this.handleEventUpdate} />\r\n                </div>\r\n            );\r\n        } //event page\r\n\r\n        else {\r\n            const events = this.state.eventsList.map((e, index) =>\r\n                <li key={e.id}><a href={\"?event=\" + index} onClick={this.handlePageSwitch}>{e.name}</a></li>);\r\n            return (\r\n                <div>\r\n                    <NewEvent onFormSubmit={this.handleNewEvent} />\r\n                    <ul>\r\n                        {events}\r\n                    </ul>\r\n                </div>\r\n            )\r\n        } //home page events list\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\n// import './main.css';\n// import App from './App';\nimport './planner.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}